function [S, ST] = ek_struct(A, cholesky)
%BUILD_RK_STRUCT Build a struct for building rational Krylov subspaces. 
%

if issparse(A)	
	if exist('cholesky', 'var') && cholesky
		[R, ~, pA] = chol(A);
		
		S = struct(... 
			'solve', @(nu, mu, x) sparse_solve(nu, mu, R', R, pA', pA, x), ... 
			'multiply', @(rho, eta, x) rho * A * x - eta * x, ...
			'isreal', true, ...
			'nrm', normest(A, 1e-2));
		ST = S;
		
	else
		[LA, UA, pA, qA] = lu(A);
		
		S = struct(... 
			'solve', @(nu, mu, x) sparse_solve(nu, mu, LA, UA, pA, qA, x), ... 
			'multiply', @(rho, eta, x) rho * A * x - eta * x, ...
			'isreal', true, ...
			'nrm', normest(A, 1e-2));
		
		if nargout >= 2
			ST = struct(... 
			'solve', @(nu, mu, x) sparse_solve(nu, mu, UA', LA', pA', qA', x), ... 
			'multiply', @(rho, eta, x) rho * A' * x - eta * x, ...
			'isreal', true, ...
			'nrm', S.nrm);
		end
	end

else
	S = struct(... 
		'solve', @(nu, mu, x) (nu * A - mu * eye(size(A), 'like', A)) \ x, ... 
		'multiply', @(rho, eta, x) rho * A * x - eta * x, ...
		'isreal', true, ...
		'nrm', norm(A));
	
	if nargout >= 2
		ST = struct(... 
		'solve', @(nu, mu, x) (nu * A' - mu * eye(size(A), 'like', A)) \ x, ... 
		'multiply', @(rho, eta, x) rho * A' * x - eta * x, ...
		'isreal', true, ...
		'nrm', S.nrm);
	end
end

end

